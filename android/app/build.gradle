apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file([
        "node", "-e", "require('expo/scripts/resolveAppEntry')",
        projectRoot, "android", "absolute"
    ].execute(null, rootDir).text.trim())

    reactNativeDir = new File([
        "node", "--print", "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim()).getParentFile().absoluteFile

    hermesCommand = new File([
        "node", "--print", "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim()).parent + "/sdks/hermesc/%OS-BIN%/hermesc"

    codegenDir = new File([
        "node", "--print", "require.resolve('@react-native/codegen/package.json')"
    ].execute(null, rootDir).text.trim()).getParentFile().absoluteFile

    cliFile = new File([
        "node", "--print", "require.resolve('@expo/cli')"
    ].execute(null, rootDir).text.trim())

    bundleCommand = "export:embed"
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    namespace 'com.dating.kute'

    ndkVersion "23.1.7779620"
    compileSdkVersion 34

    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        applicationId 'com.dating.kute'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0.0"

        manifestPlaceholders = [appAuthRedirectScheme: 'Kute']

        buildConfigField(
            "boolean",
            "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS",
            "true"
        )
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        pickFirsts += []
        excludes += []
        merges += []
        doNotStrip += []
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def frescoVersion = "2.5.0"
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled || isWebpEnabled) {
        implementation("com.facebook.fresco:fresco:$frescoVersion")
        implementation("com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion")
    }

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:$frescoVersion")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:$frescoVersion")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:$frescoVersion")
        }
    }

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Force ExoPlayer UI dependency to ensure drawable resources are available
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.1'
    
    // Google Play Services Location for expo-location compatibility
    // Using consistent versions to avoid interface/class conflicts
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.android.gms:play-services-base:18.2.0'
}

apply from: new File([
    "node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"
].execute(null, rootDir).text.trim(), "../native_modules.gradle")
applyNativeModulesAppBuildGradle(project)

apply plugin: 'com.google.gms.google-services'
